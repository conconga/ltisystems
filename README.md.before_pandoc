# Introduction

This package contains 2-order filters to follow inputs and calculate the
first derivative of the filtered-output.

The filters can be used in discrete time as much as continuous.

There is one object of the filter as SISO, and another as MIMO.

| type  |  description                      |
| :---: |  :------------------------------- |
| SISO  |  Single-Input / Single-Output     |
| MIMO  |  Multiple-Input / Multiple-Output |

# Classes
![classes.png](classes.png?raw=true "UML generated by pyreverse")

## k2OrderLTIsysSiso

### to create a continuous LTI system:
```
    qsi      : damping factor        
    wn       : [rad/s] natural freq.
    x0       : initial state       
    min_dxdt : min rate slope
    max_dxdt : max rate slope
    min_x    : min output   
    max_x    : max output  

    lti_continuous = k2OrderLTIsysSiso (self, qsi, wn, x0, min_dxdt, max_dxdt, min_x, max_x, Ts=0)
```
#
### to create a discrete LTI system:
```
    qsi      : damping factor        
    wn       : [rad/s] natural freq.
    x0       : initial state       
    min_dxdt : min rate slope
    max_dxdt : max rate slope
    min_x    : min output   
    max_x    : max output  
    Ts       : sampling frequency

    lti_discrete = k2OrderLTIsysSiso (self, qsi, wn, x0, min_dxdt, max_dxdt, min_x, max_x, Ts=Ts)
```

### to update the systems:
```
    t : update up to this time (only continuous, not used for the discrete)
    u : input of the system

    lti_continuous.update(t,u)
    lti_discrete.update(t,u)
```

## k2OrderLTIsysMimo

# How to use
```
    import sys
    sys.path.append(< up to where folder karraynav is >)
    from karraynav import kArrayNav
```
